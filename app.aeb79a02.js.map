{"version":3,"sources":["upload.js","app.js"],"names":["bytesToSize","bytes","i","parseInt","Math","floor","log","round","pow","upload","selector","options","files","input","document","querySelector","preview","createElement","classList","add","open","textContent","multi","setAttribute","accept","Array","isArray","join","insertAdjacentElement","addEventListener","click","event","target","length","from","innerHTML","forEach","file","type","match","reader","FileReader","onload","ev","src","result","insertAdjacentHTML","name","size","readAsDataURL","dataset","filter","block","closest","remove"],"mappings":";AAyFC,aAzFD,SAASA,EAAYC,GAEf,IAACA,EACI,MAAA,SAEHC,IAAAA,EAAIC,SAASC,KAAKC,MAAMD,KAAKE,IAAIL,GAASG,KAAKE,IAAI,QAClDF,OAAAA,KAAKG,MAAMN,EAAQG,KAAKI,IAAI,KAAMN,IAAM,IALjC,CAAC,QAAS,KAAM,KAAM,KAAM,MAKiBA,GAGtD,SAASO,EAAOC,GAAUC,IAAAA,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GACrCC,EAAQ,GACNC,EAAQC,SAASC,cAAcL,GAC/BM,EAAUF,SAASG,cAAc,OAEvCD,EAAQE,UAAUC,IAAI,WAEhBC,IAAAA,EAAON,SAASG,cAAc,UACpCG,EAAKF,UAAUC,IAAI,OACnBC,EAAKC,YAAc,OAEfV,EAAQW,OACVT,EAAMU,aAAa,YAAY,GAG7BZ,EAAQa,QAAUC,MAAMC,QAAQf,EAAQa,SAC1CX,EAAMU,aAAa,SAAUZ,EAAQa,OAAOG,KAAK,MAGnDd,EAAMe,sBAAsB,WAAYZ,GACxCH,EAAMe,sBAAsB,WAAYR,GAyDxCA,EAAKS,iBAAiB,QAvDD,WAAMhB,OAAAA,EAAMiB,UAwDjCjB,EAAMgB,iBAAiB,SAtDD,SAACE,GAChBA,EAAMC,OAAOpB,MAAMqB,SAIxBrB,EAAQa,MAAMS,KAAKH,EAAMC,OAAOpB,OAEhCI,EAAQmB,UAAY,GACpBvB,EAAMwB,QAAQ,SAACC,GACT,GAACA,EAAKC,KAAKC,MAAM,SAAjB,CAIEC,IAAAA,EAAS,IAAIC,WAEnBD,EAAOE,OAAS,SAACC,GACTC,IAAAA,EAAMD,EAAGX,OAAOa,OAEtB7B,EAAQ8B,mBACN,aAG6CT,mGAAAA,OAAAA,EAAKU,KAClCH,6CAAAA,OAAAA,EAAaP,WAAAA,OAAAA,EAAKU,KAEpBV,0EAAAA,OAAAA,EAAKU,KACX/C,6BAAAA,OAAAA,EAAYqC,EAAKW,MAR3B,4DAeFR,EAAOS,cAAcZ,SAsBzBrB,EAAQa,iBAAiB,QAlBH,SAACE,GACjB,GAACA,EAAMC,OAAOkB,QAAQH,KAAtB,CAIIA,IAAAA,EAAShB,EAAMC,OAAOkB,QAAtBH,KACRnC,EAAQA,EAAMuC,OAAO,SAACd,GAASA,OAAAA,EAAKU,OAASA,IAEvCK,IAAAA,EAAQpC,EACXD,cAA6BgC,eAAAA,OAAAA,EAC7BM,MAAAA,QAAQ,iBAEXD,EAAMlC,UAAUC,IAAI,YACpBiC,EAAME,YAMT,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,OAAA;;ACvFD,aAFA,IAAA,EAAA,QAAA,aAEA,EAAO,EAAA,QAAA,QAAS,CACdhC,OAAO,EACPE,OAAQ,CAAC,OAAQ,OAAQ,QAAS","file":"app.aeb79a02.js","sourceRoot":"..","sourcesContent":["function bytesToSize(bytes) {\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\"];\n  if (!bytes) {\n    return \"0 Byte\";\n  }\n  const i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\n  return Math.round(bytes / Math.pow(1024, i)) + \" \" + sizes[i];\n}\n\nexport function upload(selector, options = {}) {\n  let files = [];\n  const input = document.querySelector(selector);\n  const preview = document.createElement(\"div\");\n\n  preview.classList.add(\"preview\");\n\n  const open = document.createElement(\"button\");\n  open.classList.add(\"btn\");\n  open.textContent = \"Open\";\n\n  if (options.multi) {\n    input.setAttribute(\"multiple\", true);\n  }\n\n  if (options.accept && Array.isArray(options.accept)) {\n    input.setAttribute(\"accept\", options.accept.join(\",\"));\n  }\n\n  input.insertAdjacentElement(\"afterend\", preview);\n  input.insertAdjacentElement(\"afterend\", open);\n\n  const triggerInput = () => input.click();\n\n  const changeHandler = (event) => {\n    if (!event.target.files.length) {\n      return;\n    }\n\n    files = Array.from(event.target.files);\n\n    preview.innerHTML = \"\";\n    files.forEach((file) => {\n      if (!file.type.match(\"image\")) {\n        return;\n      }\n\n      const reader = new FileReader();\n\n      reader.onload = (ev) => {\n        const src = ev.target.result;\n\n        preview.insertAdjacentHTML(\n          \"afterbegin\",\n          `\n            <div class=\"preview-image\">\n              <div class=\"preview-remove\" data-name=\"${file.name}\">&times;</div>\n              <img src=\"${src}\" alt=\"${file.name}\" />\n              <div class=\"preview-info\">\n                <span>${file.name}</span>\n                ${bytesToSize(file.size)}\n              </div>\n            </div>\n          `\n        );\n      };\n\n      reader.readAsDataURL(file);\n    });\n  };\n\n  const removeHandler = (event) => {\n    if (!event.target.dataset.name) {\n      return;\n    }\n\n    const { name } = event.target.dataset;\n    files = files.filter((file) => file.name == !name);\n\n    const block = preview\n      .querySelector(`[data-name=\"${name}]`)\n      .closest(\"preview-image\");\n\n    block.classList.add(\"removing\");\n    block.remove();\n  };\n\n  open.addEventListener(\"click\", triggerInput);\n  input.addEventListener(\"change\", changeHandler);\n  preview.addEventListener(\"click\", removeHandler);\n}\n","import { upload } from \"./upload\";\n\nupload(\"#file\", {\n  multi: true,\n  accept: [\".png\", \".jpg\", \".jpeg\", \".gif\"],\n});\n"]}